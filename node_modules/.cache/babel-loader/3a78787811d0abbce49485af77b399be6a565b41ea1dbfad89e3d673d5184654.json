{"ast":null,"code":"var _jsxFileName = \"E:\\\\Dev\\\\markdown-previewer\\\\src\\\\component\\\\preview.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport showdown from 'showdown';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst converter = new showdown.Converter();\nconst Preview = () => {\n  _s();\n  const markdownText = useSelector(state => state.markdownText);\n  useEffect(() => {\n    // Update the preview whenever markdownText changes\n    const previewElement = document.getElementById('preview');\n    previewElement.innerHTML = converter.makeHtml(markdownText);\n  }, [markdownText]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }, this);\n};\n_s(Preview, \"IuO9yar8LeFZMP+bUXgI4oSrUKk=\", false, function () {\n  return [useSelector];\n});\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","showdown","useSelector","jsxDEV","_jsxDEV","converter","Converter","Preview","_s","markdownText","state","useEffect","previewElement","document","getElementById","innerHTML","makeHtml","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["E:/Dev/markdown-previewer/src/component/preview.js"],"sourcesContent":["import React from 'react';\r\nimport showdown from 'showdown';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst converter = new showdown.Converter();\r\n\r\nconst Preview = () => {\r\n\r\n  const markdownText = useSelector((state) => state.markdownText);\r\n\r\n  useEffect(() => {\r\n    // Update the preview whenever markdownText changes\r\n    const previewElement = document.getElementById('preview');\r\n    previewElement.innerHTML = converter.makeHtml(markdownText);\r\n  }, [markdownText]);  \r\n  \r\n  return (\r\n      <div>\r\n        <h3>Preview</h3>\r\n        <div id=\"preview\" />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Preview;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,UAAU;AAC/B,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAG,IAAIJ,QAAQ,CAACK,SAAS,CAAC,CAAC;AAE1C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAMC,YAAY,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACD,YAAY,CAAC;EAE/DE,SAAS,CAAC,MAAM;IACd;IACA,MAAMC,cAAc,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;IACzDF,cAAc,CAACG,SAAS,GAAGV,SAAS,CAACW,QAAQ,CAACP,YAAY,CAAC;EAC7D,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,oBACIL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBjB,OAAA;MAAKkB,EAAE,EAAC;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV,CAAC;AAACb,EAAA,CAhBED,OAAO;EAAA,QAEUL,WAAW;AAAA;AAAAqB,EAAA,GAF5BhB,OAAO;AAkBX,eAAeA,OAAO;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}